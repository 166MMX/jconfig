//USAGE: apply from: 'antlr3.gradle'

configurations {
    antlr
}

dependencies {
    antlr    'org.antlr:antlr:3.5.2'
    compile  'org.antlr:antlr-runtime:3.5.2'
}

task generateGrammarSource(type: JavaExec) {
    def targetLanguageLanguageName = 'java'
    def sourceSetName = 'main'
    def glob = '**/*.g'
    def debug = false

    def inputDir = file("$project.projectDir/src/$sourceSetName/antlr3")
    def inputTree = fileTree(inputDir)
    def outputDir = file("$project.buildDir/../generated/$sourceSetName/$targetLanguageLanguageName")

    inputTree.include glob
    mkdir(outputDir)

    inputs.files inputTree
    outputs.dir outputDir

    workingDir = inputDir
    description = 'Generates Java sources from Antlr3 grammars.'
    main = 'org.antlr.Tool'
    classpath = configurations.antlr
    args = ['-o', outputDir, inputTree.files.collect { File file ->
        inputDir.toPath().relativize(file.toPath()).toFile()
    }].flatten()
    if (debug)
    {
        args = ['-debug', '-o', outputDir, inputTree.files.collect { File file ->
            inputDir.toPath().relativize(file.toPath()).toFile()
        }].flatten()
    }
}

task generateTestGrammarSource(type: JavaExec) {
    def targetLanguageLanguageName = 'java'
    def sourceSetName = 'test'
    def glob = '**/*.g'
    def debug = false

    def inputDir = file("$project.projectDir/src/$sourceSetName/antlr3")
    def inputTree = fileTree(inputDir)
    def outputDir = file("$project.buildDir/../generated/$sourceSetName/$targetLanguageLanguageName")

    inputTree.include glob
    mkdir(outputDir)

    inputs.files inputTree
    outputs.dir outputDir

    workingDir = inputDir
    description = 'Generates Java sources from Antlr3 grammars.'
    main = 'org.antlr.Tool'
    classpath = configurations.antlr
    args = ['-o', outputDir, inputTree.files.collect { File file ->
        inputDir.toPath().relativize(file.toPath()).toFile()
    }].flatten()
    if (debug)
    {
        args = ['-debug', '-o', outputDir, inputTree.files.collect { File file ->
            inputDir.toPath().relativize(file.toPath()).toFile()
        }].flatten()
    }
}

sourceSets.main.java.srcDir  generateGrammarSource.outputs.files.singleFile
sourceSets.test.java.srcDir  generateTestGrammarSource.outputs.files.singleFile
